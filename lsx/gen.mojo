from utils.variant import Variant
from collections.optional import Optional
from . import Element, Node, Attribute, Htmlable, OptionalString
@value
struct SuperScript(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SuperScriptArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="sup", attributes=attributes, children=children)

@value
struct SuperScriptArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Summary(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SummaryArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="summary", attributes=attributes, children=children)

@value
struct SummaryArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Anchor(Htmlable):
    var children: List[Element]
    var href: OptionalString
    var target: OptionalString
    var download: OptionalString
    var ping: OptionalString
    var rel: OptionalString
    var hreflang: OptionalString
    var type_: OptionalString
    var referrerpolicy: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: AnchorArgs, href: OptionalString = None, target: OptionalString = None, download: OptionalString = None, ping: OptionalString = None, rel: OptionalString = None, hreflang: OptionalString = None, type_: OptionalString = None, referrerpolicy: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.href = href
        self.target = target
        self.download = download
        self.ping = ping
        self.rel = rel
        self.hreflang = hreflang
        self.type_ = type_
        self.referrerpolicy = referrerpolicy
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.href:
            attributes["href"] = self.href.value()
        if self.target:
            attributes["target"] = self.target.value()
        if self.download:
            attributes["download"] = self.download.value()
        if self.ping:
            attributes["ping"] = self.ping.value()
        if self.rel:
            attributes["rel"] = self.rel.value()
        if self.hreflang:
            attributes["hreflang"] = self.hreflang.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="a", attributes=attributes, children=children)

@value
struct AnchorArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableRow(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableRowArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="tr", attributes=attributes, children=children)

@value
struct TableRowArgs(Htmlable):
    alias _storage = Variant[Script, TableCell, TableHeader, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct Aside(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: AsideArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="aside", attributes=attributes, children=children)

@value
struct AsideArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Navigation(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: NavigationArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="nav", attributes=attributes, children=children)

@value
struct NavigationArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableBody(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableBodyArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="tbody", attributes=attributes, children=children)

@value
struct TableBodyArgs(Htmlable):
    alias _storage = Variant[Script, TableRow, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct Header(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: HeaderArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="header", attributes=attributes, children=children)

@value
struct HeaderArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Definition(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DefinitionArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="dfn", attributes=attributes, children=children)

@value
struct DefinitionArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Embed(Htmlable):
    var src: OptionalString
    var type_: OptionalString
    var width: OptionalString
    var height: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.src:
            attributes["src"] = self.src.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="embed", attributes=attributes, children=children)

@value
struct Span(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SpanArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="span", attributes=attributes, children=children)

@value
struct SpanArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Canvas(Htmlable):
    var children: List[Element]
    var width: Optional[Int]
    var height: Optional[Int]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: CanvasArgs, width: Optional[Int] = None, height: Optional[Int] = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.width = width
        self.height = height
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="canvas", attributes=attributes, children=children)

@value
struct CanvasArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Abbreviation(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: AbbreviationArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="abbr", attributes=attributes, children=children)

@value
struct AbbreviationArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Script(Htmlable):
    var children: List[Element]
    var src: OptionalString
    var type_: OptionalString
    var nomodule: OptionalString
    var async_: OptionalString
    var defer: OptionalString
    var crossorigin: OptionalString
    var integrity: OptionalString
    var referrerpolicy: OptionalString
    var blocking: OptionalString
    var fetchpriority: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ScriptArgs, src: OptionalString = None, type_: OptionalString = None, nomodule: OptionalString = None, async_: OptionalString = None, defer: OptionalString = None, crossorigin: OptionalString = None, integrity: OptionalString = None, referrerpolicy: OptionalString = None, blocking: OptionalString = None, fetchpriority: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.src = src
        self.type_ = type_
        self.nomodule = nomodule
        self.async_ = async_
        self.defer = defer
        self.crossorigin = crossorigin
        self.integrity = integrity
        self.referrerpolicy = referrerpolicy
        self.blocking = blocking
        self.fetchpriority = fetchpriority
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.src:
            attributes["src"] = self.src.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.nomodule:
            attributes["nomodule"] = self.nomodule.value()
        if self.async_:
            attributes["async_"] = self.async_.value()
        if self.defer:
            attributes["defer"] = self.defer.value()
        if self.crossorigin:
            attributes["crossorigin"] = self.crossorigin.value()
        if self.integrity:
            attributes["integrity"] = self.integrity.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.blocking:
            attributes["blocking"] = self.blocking.value()
        if self.fetchpriority:
            attributes["fetchpriority"] = self.fetchpriority.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="script", attributes=attributes, children=children)

@value
struct ScriptArgs(Htmlable):
    alias _storage = Variant[Text]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Text]():
            return self.get[Text]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Text):
        self.data = rhs

@value
struct UnorderedList(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: UnorderedListArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="ul", attributes=attributes, children=children)

@value
struct UnorderedListArgs(Htmlable):
    alias _storage = Variant[ListItem, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct Heading6(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading6Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h6", attributes=attributes, children=children)

@value
struct Heading6Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct BidirectionalIsolate(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: BidirectionalIsolateArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="bdi", attributes=attributes, children=children)

@value
struct BidirectionalIsolateArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct SideComment(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SideCommentArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="small", attributes=attributes, children=children)

@value
struct SideCommentArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableColumnGroup(Htmlable):
    var children: List[Element]
    var span: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableColumnGroupArgs, span: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.span = span
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.span:
            attributes["span"] = self.span.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="colgroup", attributes=attributes, children=children)

@value
struct TableColumnGroupArgs(Htmlable):
    alias _storage = Variant[TableColumn, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct MediaSource(Htmlable):
    var type_: OptionalString
    var media: OptionalString
    var src: OptionalString
    var srcset: OptionalString
    var sizes: OptionalString
    var width: Optional[Int]
    var height: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.media:
            attributes["media"] = self.media.value()
        if self.src:
            attributes["src"] = self.src.value()
        if self.srcset:
            attributes["srcset"] = self.srcset.value()
        if self.sizes:
            attributes["sizes"] = self.sizes.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="source", attributes=attributes, children=children)

@value
struct Template(Htmlable):
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="template", attributes=attributes, children=children)

@value
struct Search(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SearchArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="search", attributes=attributes, children=children)

@value
struct SearchArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Footer(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: FooterArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="footer", attributes=attributes, children=children)

@value
struct FooterArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Underline(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: UnderlineArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="u", attributes=attributes, children=children)

@value
struct UnderlineArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Code(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: CodeArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="code", attributes=attributes, children=children)

@value
struct CodeArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Head(Htmlable):
    var children: List[Element]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: HeadArgs, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="head", attributes=attributes, children=children)

@value
struct HeadArgs(Htmlable):
    alias _storage = Variant[Base, Link, Meta, NoScript, Script, Style, Template, Title]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs

@value
struct BlockQuote(Htmlable):
    var children: List[Element]
    var cite: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: BlockQuoteArgs, cite: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.cite = cite
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.cite:
            attributes["cite"] = self.cite.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="blockquote", attributes=attributes, children=children)

@value
struct BlockQuoteArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Section(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SectionArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="section", attributes=attributes, children=children)

@value
struct SectionArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Input(Htmlable):
    var accept: OptionalString
    var alt: OptionalString
    var autocomplete: OptionalString
    var checked: OptionalString
    var dirname: OptionalString
    var disabled: OptionalString
    var form: OptionalString
    var formaction: OptionalString
    var formenctype: OptionalString
    var formmethod: OptionalString
    var formnovalidate: OptionalString
    var formtarget: OptionalString
    var height: OptionalString
    var list: OptionalString
    var max: OptionalString
    var maxlength: OptionalString
    var min: OptionalString
    var minlength: OptionalString
    var multiple: OptionalString
    var name: OptionalString
    var pattern: OptionalString
    var placeholder: OptionalString
    var popovertarget: OptionalString
    var popovertargetaction: OptionalString
    var readonly: OptionalString
    var required: OptionalString
    var size: OptionalString
    var src: OptionalString
    var step: OptionalString
    var type_: OptionalString
    var value: OptionalString
    var width: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_multi_line: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.accept:
            attributes["accept"] = self.accept.value()
        if self.alt:
            attributes["alt"] = self.alt.value()
        if self.autocomplete:
            attributes["autocomplete"] = self.autocomplete.value()
        if self.checked:
            attributes["checked"] = self.checked.value()
        if self.dirname:
            attributes["dirname"] = self.dirname.value()
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.formaction:
            attributes["formaction"] = self.formaction.value()
        if self.formenctype:
            attributes["formenctype"] = self.formenctype.value()
        if self.formmethod:
            attributes["formmethod"] = self.formmethod.value()
        if self.formnovalidate:
            attributes["formnovalidate"] = self.formnovalidate.value()
        if self.formtarget:
            attributes["formtarget"] = self.formtarget.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.list:
            attributes["list"] = self.list.value()
        if self.max:
            attributes["max"] = self.max.value()
        if self.maxlength:
            attributes["maxlength"] = self.maxlength.value()
        if self.min:
            attributes["min"] = self.min.value()
        if self.minlength:
            attributes["minlength"] = self.minlength.value()
        if self.multiple:
            attributes["multiple"] = self.multiple.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.pattern:
            attributes["pattern"] = self.pattern.value()
        if self.placeholder:
            attributes["placeholder"] = self.placeholder.value()
        if self.popovertarget:
            attributes["popovertarget"] = self.popovertarget.value()
        if self.popovertargetaction:
            attributes["popovertargetaction"] = self.popovertargetaction.value()
        if self.readonly:
            attributes["readonly"] = self.readonly.value()
        if self.required:
            attributes["required"] = self.required.value()
        if self.size:
            attributes["size"] = self.size.value()
        if self.src:
            attributes["src"] = self.src.value()
        if self.step:
            attributes["step"] = self.step.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.value:
            attributes["value"] = self.value.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="input", attributes=attributes, children=children)

@value
struct RubyAnnotation(Htmlable):
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="ruby", attributes=attributes, children=children)

@value
struct Main(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: MainArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="main", attributes=attributes, children=children)

@value
struct MainArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct LineBreakOpportunity(Htmlable):
    var role: OptionalString
    var aria_hidden: Optional[Bool]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="wbr", attributes=attributes, children=children)

@value
struct Meter(Htmlable):
    var children: List[Element]
    var value: Optional[Float64]
    var min: Optional[Float64]
    var max: Optional[Float64]
    var low: Optional[Float64]
    var high: Optional[Float64]
    var optimum: Optional[Float64]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: MeterArgs, value: Optional[Float64] = None, min: Optional[Float64] = None, max: Optional[Float64] = None, low: Optional[Float64] = None, high: Optional[Float64] = None, optimum: Optional[Float64] = None, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.value = value
        self.min = min
        self.max = max
        self.low = low
        self.high = high
        self.optimum = optimum
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.value:
            attributes["value"] = self.value.value()
        if self.min:
            attributes["min"] = self.min.value()
        if self.max:
            attributes["max"] = self.max.value()
        if self.low:
            attributes["low"] = self.low.value()
        if self.high:
            attributes["high"] = self.high.value()
        if self.optimum:
            attributes["optimum"] = self.optimum.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="meter", attributes=attributes, children=children)

@value
struct MeterArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Output(Htmlable):
    var children: List[Element]
    var for_: OptionalString
    var form: OptionalString
    var name: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: OutputArgs, for_: OptionalString = None, form: OptionalString = None, name: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.for_ = for_
        self.form = form
        self.name = name
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.for_:
            attributes["for_"] = self.for_.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="output", attributes=attributes, children=children)

@value
struct OutputArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Heading1(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading1Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h1", attributes=attributes, children=children)

@value
struct Heading1Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Caption(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: CaptionArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="caption", attributes=attributes, children=children)

@value
struct CaptionArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Fieldset(Htmlable):
    var children: List[Element]
    var disabled: Optional[Bool]
    var form: OptionalString
    var name: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: FieldsetArgs, disabled: Optional[Bool] = None, form: OptionalString = None, name: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.disabled = disabled
        self.form = form
        self.name = name
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="fieldset", attributes=attributes, children=children)

@value
struct FieldsetArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Style(Htmlable):
    var children: List[Element]
    var media: OptionalString
    var blocking: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: StyleArgs, media: OptionalString = None, blocking: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.media = media
        self.blocking = blocking
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.media:
            attributes["media"] = self.media.value()
        if self.blocking:
            attributes["blocking"] = self.blocking.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="style", attributes=attributes, children=children)

@value
struct StyleArgs(Htmlable):
    alias _storage = Variant[Text]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Text]():
            return self.get[Text]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Text):
        self.data = rhs

@value
struct BidirectionalTextOverride(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: BidirectionalTextOverrideArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="bdo", attributes=attributes, children=children)

@value
struct BidirectionalTextOverrideArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct ImageMapArea(Htmlable):
    var alt: OptionalString
    var coords: OptionalString
    var shape: OptionalString
    var href: OptionalString
    var target: OptionalString
    var download: OptionalString
    var ping: OptionalString
    var rel: OptionalString
    var referrerpolicy: OptionalString
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pressed: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.alt:
            attributes["alt"] = self.alt.value()
        if self.coords:
            attributes["coords"] = self.coords.value()
        if self.shape:
            attributes["shape"] = self.shape.value()
        if self.href:
            attributes["href"] = self.href.value()
        if self.target:
            attributes["target"] = self.target.value()
        if self.download:
            attributes["download"] = self.download.value()
        if self.ping:
            attributes["ping"] = self.ping.value()
        if self.rel:
            attributes["rel"] = self.rel.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="area", attributes=attributes, children=children)

@value
struct FigureCaption(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: FigureCaptionArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="figcaption", attributes=attributes, children=children)

@value
struct FigureCaptionArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct SubScript(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SubScriptArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="sub", attributes=attributes, children=children)

@value
struct SubScriptArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct SampleOutput(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SampleOutputArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="samp", attributes=attributes, children=children)

@value
struct SampleOutputArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct StrikeThrough(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: StrikeThroughArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="s", attributes=attributes, children=children)

@value
struct StrikeThroughArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Slot(Htmlable):
    var children: List[Element]
    var name: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SlotArgs, name: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.name = name
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.name:
            attributes["name"] = self.name.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="slot", attributes=attributes, children=children)

@value
struct SlotArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct RubyText(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: RubyTextArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="rt", attributes=attributes, children=children)

@value
struct RubyTextArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct OrderedList(Htmlable):
    var children: List[Element]
    var reversed: OptionalString
    var start: OptionalString
    var type_: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: OrderedListArgs, reversed: OptionalString = None, start: OptionalString = None, type_: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.reversed = reversed
        self.start = start
        self.type_ = type_
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.reversed:
            attributes["reversed"] = self.reversed.value()
        if self.start:
            attributes["start"] = self.start.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="ol", attributes=attributes, children=children)

@value
struct OrderedListArgs(Htmlable):
    alias _storage = Variant[ListItem, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct TableFoot(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableFootArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="tfoot", attributes=attributes, children=children)

@value
struct TableFootArgs(Htmlable):
    alias _storage = Variant[Script, TableRow, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct DescriptionDetails(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DescriptionDetailsArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="dd", attributes=attributes, children=children)

@value
struct DescriptionDetailsArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct ThematicBreak(Htmlable):
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="hr", attributes=attributes, children=children)

@value
struct Italic(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ItalicArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="i", attributes=attributes, children=children)

@value
struct ItalicArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Data(Htmlable):
    var children: List[Element]
    var value: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DataArgs, value: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.value = value
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.value:
            attributes["value"] = self.value.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="data", attributes=attributes, children=children)

@value
struct DataArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Dialog(Htmlable):
    var children: List[Element]
    var open: Optional[Bool]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DialogArgs, open: Optional[Bool] = None, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.open = open
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.open:
            attributes["open"] = self.open.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="dialog", attributes=attributes, children=children)

@value
struct DialogArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableColumn(Htmlable):
    var span: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.span:
            attributes["span"] = self.span.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="col", attributes=attributes, children=children)

@value
struct HeadingGroup(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: HeadingGroupArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="hgroup", attributes=attributes, children=children)

@value
struct HeadingGroupArgs(Htmlable):
    alias _storage = Variant[Heading1, Heading2, Heading3, Heading4, Heading5, Heading6]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs

@value
struct Address(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: AddressArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="address", attributes=attributes, children=children)

@value
struct AddressArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Variable(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: VariableArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="var", attributes=attributes, children=children)

@value
struct VariableArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Object(Htmlable):
    var children: List[Element]
    var data: OptionalString
    var type_: OptionalString
    var name: OptionalString
    var form: OptionalString
    var width: OptionalString
    var height: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ObjectArgs, data: OptionalString = None, type_: OptionalString = None, name: OptionalString = None, form: OptionalString = None, width: OptionalString = None, height: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.data = data
        self.type_ = type_
        self.name = name
        self.form = form
        self.width = width
        self.height = height
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.data:
            attributes["data"] = self.data.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="object", attributes=attributes, children=children)

@value
struct ObjectArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Division(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DivisionArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="div", attributes=attributes, children=children)

@value
struct DivisionArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Heading3(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading3Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h3", attributes=attributes, children=children)

@value
struct Heading3Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Time(Htmlable):
    var children: List[Element]
    var date_time: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TimeArgs, date_time: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.date_time = date_time
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.date_time:
            attributes["date_time"] = self.date_time.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="time", attributes=attributes, children=children)

@value
struct TimeArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct ListItem(Htmlable):
    var children: List[Element]
    var value: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ListItemArgs, value: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.value = value
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.value:
            attributes["value"] = self.value.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="li", attributes=attributes, children=children)

@value
struct ListItemArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Emphasis(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: EmphasisArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="em", attributes=attributes, children=children)

@value
struct EmphasisArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Menu(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: MenuArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="menu", attributes=attributes, children=children)

@value
struct MenuArgs(Htmlable):
    alias _storage = Variant[ListItem, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct DeletedText(Htmlable):
    var children: List[Element]
    var cite: OptionalString
    var date_time: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DeletedTextArgs, cite: OptionalString = None, date_time: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.cite = cite
        self.date_time = date_time
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.cite:
            attributes["cite"] = self.cite.value()
        if self.date_time:
            attributes["date_time"] = self.date_time.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="del", attributes=attributes, children=children)

@value
struct DeletedTextArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Button(Htmlable):
    var children: List[Element]
    var disabled: Optional[Bool]
    var form: OptionalString
    var form_action: OptionalString
    var form_enctype: OptionalString
    var form_method: OptionalString
    var form_no_validate: Optional[Bool]
    var form_target: OptionalString
    var name: OptionalString
    var popovertarget: OptionalString
    var popovertargetaction: OptionalString
    var type_: OptionalString
    var value: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ButtonArgs, disabled: Optional[Bool] = None, form: OptionalString = None, form_action: OptionalString = None, form_enctype: OptionalString = None, form_method: OptionalString = None, form_no_validate: Optional[Bool] = None, form_target: OptionalString = None, name: OptionalString = None, popovertarget: OptionalString = None, popovertargetaction: OptionalString = None, type_: OptionalString = None, value: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.disabled = disabled
        self.form = form
        self.form_action = form_action
        self.form_enctype = form_enctype
        self.form_method = form_method
        self.form_no_validate = form_no_validate
        self.form_target = form_target
        self.name = name
        self.popovertarget = popovertarget
        self.popovertargetaction = popovertargetaction
        self.type_ = type_
        self.value = value
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.form_action:
            attributes["form_action"] = self.form_action.value()
        if self.form_enctype:
            attributes["form_enctype"] = self.form_enctype.value()
        if self.form_method:
            attributes["form_method"] = self.form_method.value()
        if self.form_no_validate:
            attributes["form_no_validate"] = self.form_no_validate.value()
        if self.form_target:
            attributes["form_target"] = self.form_target.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.popovertarget:
            attributes["popovertarget"] = self.popovertarget.value()
        if self.popovertargetaction:
            attributes["popovertargetaction"] = self.popovertargetaction.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.value:
            attributes["value"] = self.value.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="button", attributes=attributes, children=children)

@value
struct ButtonArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Details(Htmlable):
    var children: List[Element]
    var name: OptionalString
    var open: Optional[Bool]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DetailsArgs, name: OptionalString = None, open: Optional[Bool] = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.name = name
        self.open = open
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.name:
            attributes["name"] = self.name.value()
        if self.open:
            attributes["open"] = self.open.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="details", attributes=attributes, children=children)

@value
struct DetailsArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, Summary, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Paragraph(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ParagraphArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="p", attributes=attributes, children=children)

@value
struct ParagraphArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct OptionGroup(Htmlable):
    var children: List[Element]
    var disabled: Optional[Bool]
    var label: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: OptionGroupArgs, disabled: Optional[Bool] = None, label: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.disabled = disabled
        self.label = label
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.label:
            attributes["label"] = self.label.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="optgroup", attributes=attributes, children=children)

@value
struct OptionGroupArgs(Htmlable):
    alias _storage = Variant[Option, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct Quotation(Htmlable):
    var children: List[Element]
    var cite: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: QuotationArgs, cite: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.cite = cite
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.cite:
            attributes["cite"] = self.cite.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="q", attributes=attributes, children=children)

@value
struct QuotationArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct LineBreak(Htmlable):
    var role: OptionalString
    var aria_hidden: Optional[Bool]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="br", attributes=attributes, children=children)

@value
struct Table(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="table", attributes=attributes, children=children)

@value
struct TableArgs(Htmlable):
    alias _storage = Variant[Caption, Script, TableBody, TableColumnGroup, TableFoot, TableHead, TableRow, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct Option(Htmlable):
    var children: List[Element]
    var disabled: Optional[Bool]
    var label: OptionalString
    var selected: Optional[Bool]
    var value: OptionalString
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: OptionArgs, disabled: Optional[Bool] = None, label: OptionalString = None, selected: Optional[Bool] = None, value: OptionalString = None, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.disabled = disabled
        self.label = label
        self.selected = selected
        self.value = value
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.label:
            attributes["label"] = self.label.value()
        if self.selected:
            attributes["selected"] = self.selected.value()
        if self.value:
            attributes["value"] = self.value.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="option", attributes=attributes, children=children)

@value
struct OptionArgs(Htmlable):
    alias _storage = Variant[Text]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Text]():
            return self.get[Text]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Text):
        self.data = rhs

@value
struct NoScript(Htmlable):
    var children: List[Element]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: NoScriptArgs, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="noscript", attributes=attributes, children=children)

@value
struct NoScriptArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Heading2(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading2Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h2", attributes=attributes, children=children)

@value
struct Heading2Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Article(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ArticleArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="article", attributes=attributes, children=children)

@value
struct ArticleArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Body(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: BodyArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="body", attributes=attributes, children=children)

@value
struct BodyArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TextArea(Htmlable):
    var autocomplete: OptionalString
    var cols: Optional[Int]
    var dir_name: OptionalString
    var disabled: Optional[Bool]
    var form: OptionalString
    var max_length: Optional[Int]
    var min_length: Optional[Int]
    var name: OptionalString
    var placeholder: OptionalString
    var read_only: Optional[Bool]
    var required: Optional[Bool]
    var rows: Optional[Int]
    var wrap: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_line: Optional[Bool]
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.autocomplete:
            attributes["autocomplete"] = self.autocomplete.value()
        if self.cols:
            attributes["cols"] = self.cols.value()
        if self.dir_name:
            attributes["dir_name"] = self.dir_name.value()
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.max_length:
            attributes["max_length"] = self.max_length.value()
        if self.min_length:
            attributes["min_length"] = self.min_length.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.placeholder:
            attributes["placeholder"] = self.placeholder.value()
        if self.read_only:
            attributes["read_only"] = self.read_only.value()
        if self.required:
            attributes["required"] = self.required.value()
        if self.rows:
            attributes["rows"] = self.rows.value()
        if self.wrap:
            attributes["wrap"] = self.wrap.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="textarea", attributes=attributes, children=children)

@value
struct Iframe(Htmlable):
    var src: OptionalString
    var srcdoc: OptionalString
    var name: OptionalString
    var sandbox: OptionalString
    var allow: OptionalString
    var allowfullscreen: OptionalString
    var width: OptionalString
    var height: OptionalString
    var referrerpolicy: OptionalString
    var loading: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.src:
            attributes["src"] = self.src.value()
        if self.srcdoc:
            attributes["srcdoc"] = self.srcdoc.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.sandbox:
            attributes["sandbox"] = self.sandbox.value()
        if self.allow:
            attributes["allow"] = self.allow.value()
        if self.allowfullscreen:
            attributes["allowfullscreen"] = self.allowfullscreen.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.loading:
            attributes["loading"] = self.loading.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="iframe", attributes=attributes, children=children)

@value
struct Video(Htmlable):
    var children: List[Element]
    var src: OptionalString
    var crossorigin: OptionalString
    var poster: OptionalString
    var preload: OptionalString
    var autoplay: OptionalString
    var plays_inline: Optional[Bool]
    var loop_: OptionalString
    var muted: OptionalString
    var controls: OptionalString
    var width: Optional[Int]
    var height: Optional[Int]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: VideoArgs, src: OptionalString = None, crossorigin: OptionalString = None, poster: OptionalString = None, preload: OptionalString = None, autoplay: OptionalString = None, plays_inline: Optional[Bool] = None, loop_: OptionalString = None, muted: OptionalString = None, controls: OptionalString = None, width: Optional[Int] = None, height: Optional[Int] = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.src = src
        self.crossorigin = crossorigin
        self.poster = poster
        self.preload = preload
        self.autoplay = autoplay
        self.plays_inline = plays_inline
        self.loop_ = loop_
        self.muted = muted
        self.controls = controls
        self.width = width
        self.height = height
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.src:
            attributes["src"] = self.src.value()
        if self.crossorigin:
            attributes["crossorigin"] = self.crossorigin.value()
        if self.poster:
            attributes["poster"] = self.poster.value()
        if self.preload:
            attributes["preload"] = self.preload.value()
        if self.autoplay:
            attributes["autoplay"] = self.autoplay.value()
        if self.plays_inline:
            attributes["plays_inline"] = self.plays_inline.value()
        if self.loop_:
            attributes["loop_"] = self.loop_.value()
        if self.muted:
            attributes["muted"] = self.muted.value()
        if self.controls:
            attributes["controls"] = self.controls.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="video", attributes=attributes, children=children)

@value
struct VideoArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Image(Htmlable):
    var alt: OptionalString
    var src: OptionalString
    var srcset: OptionalString
    var sizes: OptionalString
    var crossorigin: OptionalString
    var usemap: OptionalString
    var ismap: OptionalString
    var width: OptionalString
    var height: OptionalString
    var referrerpolicy: OptionalString
    var decoding: OptionalString
    var loading: OptionalString
    var fetchpriority: OptionalString
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.alt:
            attributes["alt"] = self.alt.value()
        if self.src:
            attributes["src"] = self.src.value()
        if self.srcset:
            attributes["srcset"] = self.srcset.value()
        if self.sizes:
            attributes["sizes"] = self.sizes.value()
        if self.crossorigin:
            attributes["crossorigin"] = self.crossorigin.value()
        if self.usemap:
            attributes["usemap"] = self.usemap.value()
        if self.ismap:
            attributes["ismap"] = self.ismap.value()
        if self.width:
            attributes["width"] = self.width.value()
        if self.height:
            attributes["height"] = self.height.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.decoding:
            attributes["decoding"] = self.decoding.value()
        if self.loading:
            attributes["loading"] = self.loading.value()
        if self.fetchpriority:
            attributes["fetchpriority"] = self.fetchpriority.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="img", attributes=attributes, children=children)

@value
struct Progress(Htmlable):
    var children: List[Element]
    var value: Optional[Float64]
    var max: Optional[Float64]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ProgressArgs, value: Optional[Float64] = None, max: Optional[Float64] = None, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.value = value
        self.max = max
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.value:
            attributes["value"] = self.value.value()
        if self.max:
            attributes["max"] = self.max.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="progress", attributes=attributes, children=children)

@value
struct ProgressArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Title(Htmlable):
    var children: List[Element]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TitleArgs, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="title", attributes=attributes, children=children)

@value
struct TitleArgs(Htmlable):
    alias _storage = Variant[Text]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Text]():
            return self.get[Text]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Text):
        self.data = rhs

@value
struct InsertedText(Htmlable):
    var children: List[Element]
    var cite: OptionalString
    var date_time: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: InsertedTextArgs, cite: OptionalString = None, date_time: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.cite = cite
        self.date_time = date_time
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.cite:
            attributes["cite"] = self.cite.value()
        if self.date_time:
            attributes["date_time"] = self.date_time.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="ins", attributes=attributes, children=children)

@value
struct InsertedTextArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Heading5(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading5Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h5", attributes=attributes, children=children)

@value
struct Heading5Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Base(Htmlable):
    var href: OptionalString
    var target: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.href:
            attributes["href"] = self.href.value()
        if self.target:
            attributes["target"] = self.target.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="base", attributes=attributes, children=children)

@value
struct Picture(Htmlable):
    var children: List[Element]
    var aria_hidden: Optional[Bool]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: PictureArgs, aria_hidden: Optional[Bool] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.aria_hidden = aria_hidden
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="picture", attributes=attributes, children=children)

@value
struct PictureArgs(Htmlable):
    alias _storage = Variant[Image, MediaSource, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct TextTrack(Htmlable):
    var kind: OptionalString
    var src: OptionalString
    var srclang: OptionalString
    var label: OptionalString
    var default: Optional[Bool]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.kind:
            attributes["kind"] = self.kind.value()
        if self.src:
            attributes["src"] = self.src.value()
        if self.srclang:
            attributes["srclang"] = self.srclang.value()
        if self.label:
            attributes["label"] = self.label.value()
        if self.default:
            attributes["default"] = self.default.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="track", attributes=attributes, children=children)

@value
struct KeyboardInput(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: KeyboardInputArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="kbd", attributes=attributes, children=children)

@value
struct KeyboardInputArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Audio(Htmlable):
    var children: List[Element]
    var src: OptionalString
    var crossorigin: OptionalString
    var preload: OptionalString
    var autoplay: OptionalString
    var loop_: OptionalString
    var muted: OptionalString
    var controls: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: AudioArgs, src: OptionalString = None, crossorigin: OptionalString = None, preload: OptionalString = None, autoplay: OptionalString = None, loop_: OptionalString = None, muted: OptionalString = None, controls: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.src = src
        self.crossorigin = crossorigin
        self.preload = preload
        self.autoplay = autoplay
        self.loop_ = loop_
        self.muted = muted
        self.controls = controls
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.src:
            attributes["src"] = self.src.value()
        if self.crossorigin:
            attributes["crossorigin"] = self.crossorigin.value()
        if self.preload:
            attributes["preload"] = self.preload.value()
        if self.autoplay:
            attributes["autoplay"] = self.autoplay.value()
        if self.loop_:
            attributes["loop_"] = self.loop_.value()
        if self.muted:
            attributes["muted"] = self.muted.value()
        if self.controls:
            attributes["controls"] = self.controls.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="audio", attributes=attributes, children=children)

@value
struct AudioArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Html(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: HtmlArgs, role: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="html", attributes=attributes, children=children)

@value
struct HtmlArgs(Htmlable):
    alias _storage = Variant[Body, Head]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs

@value
struct DescriptionTerm(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DescriptionTermArgs, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="dt", attributes=attributes, children=children)

@value
struct DescriptionTermArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct DataList(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DataListArgs, role: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="datalist", attributes=attributes, children=children)

@value
struct DataListArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Option, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Link(Htmlable):
    var href: OptionalString
    var crossorigin: OptionalString
    var rel: OptionalString
    var media: OptionalString
    var integrity: OptionalString
    var hreflang: OptionalString
    var type_: OptionalString
    var referrerpolicy: OptionalString
    var sizes: OptionalString
    var imagesrcset: OptionalString
    var imagesizes: OptionalString
    var as_: OptionalString
    var blocking: OptionalString
    var color: OptionalString
    var disabled: OptionalString
    var fetchpriority: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.href:
            attributes["href"] = self.href.value()
        if self.crossorigin:
            attributes["crossorigin"] = self.crossorigin.value()
        if self.rel:
            attributes["rel"] = self.rel.value()
        if self.media:
            attributes["media"] = self.media.value()
        if self.integrity:
            attributes["integrity"] = self.integrity.value()
        if self.hreflang:
            attributes["hreflang"] = self.hreflang.value()
        if self.type_:
            attributes["type_"] = self.type_.value()
        if self.referrerpolicy:
            attributes["referrerpolicy"] = self.referrerpolicy.value()
        if self.sizes:
            attributes["sizes"] = self.sizes.value()
        if self.imagesrcset:
            attributes["imagesrcset"] = self.imagesrcset.value()
        if self.imagesizes:
            attributes["imagesizes"] = self.imagesizes.value()
        if self.as_:
            attributes["as_"] = self.as_.value()
        if self.blocking:
            attributes["blocking"] = self.blocking.value()
        if self.color:
            attributes["color"] = self.color.value()
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.fetchpriority:
            attributes["fetchpriority"] = self.fetchpriority.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="link", attributes=attributes, children=children)

@value
struct PreformattedText(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: PreformattedTextArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="pre", attributes=attributes, children=children)

@value
struct PreformattedTextArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Label(Htmlable):
    var children: List[Element]
    var for_: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: LabelArgs, for_: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.for_ = for_
        self.aria_atomic = aria_atomic
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.for_:
            attributes["for_"] = self.for_.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="label", attributes=attributes, children=children)

@value
struct LabelArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Figure(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: FigureArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="figure", attributes=attributes, children=children)

@value
struct FigureArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Strong(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: StrongArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="strong", attributes=attributes, children=children)

@value
struct StrongArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableHeader(Htmlable):
    var children: List[Element]
    var colspan: OptionalString
    var rowspan: OptionalString
    var headers: OptionalString
    var scope: OptionalString
    var abbr: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableHeaderArgs, colspan: OptionalString = None, rowspan: OptionalString = None, headers: OptionalString = None, scope: OptionalString = None, abbr: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.colspan = colspan
        self.rowspan = rowspan
        self.headers = headers
        self.scope = scope
        self.abbr = abbr
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.colspan:
            attributes["colspan"] = self.colspan.value()
        if self.rowspan:
            attributes["rowspan"] = self.rowspan.value()
        if self.headers:
            attributes["headers"] = self.headers.value()
        if self.scope:
            attributes["scope"] = self.scope.value()
        if self.abbr:
            attributes["abbr"] = self.abbr.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="th", attributes=attributes, children=children)

@value
struct TableHeaderArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Form(Htmlable):
    var children: List[Element]
    var accept_charset: OptionalString
    var action: OptionalString
    var autocomplete: OptionalString
    var enctype: OptionalString
    var method: OptionalString
    var name: OptionalString
    var no_validate: Optional[Bool]
    var target: OptionalString
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: FormArgs, accept_charset: OptionalString = None, action: OptionalString = None, autocomplete: OptionalString = None, enctype: OptionalString = None, method: OptionalString = None, name: OptionalString = None, no_validate: Optional[Bool] = None, target: OptionalString = None, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.accept_charset = accept_charset
        self.action = action
        self.autocomplete = autocomplete
        self.enctype = enctype
        self.method = method
        self.name = name
        self.no_validate = no_validate
        self.target = target
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.accept_charset:
            attributes["accept_charset"] = self.accept_charset.value()
        if self.action:
            attributes["action"] = self.action.value()
        if self.autocomplete:
            attributes["autocomplete"] = self.autocomplete.value()
        if self.enctype:
            attributes["enctype"] = self.enctype.value()
        if self.method:
            attributes["method"] = self.method.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.no_validate:
            attributes["no_validate"] = self.no_validate.value()
        if self.target:
            attributes["target"] = self.target.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="form", attributes=attributes, children=children)

@value
struct FormArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct TableHead(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableHeadArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="thead", attributes=attributes, children=children)

@value
struct TableHeadArgs(Htmlable):
    alias _storage = Variant[Script, TableRow, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct RubyFallbackParenthesis(Htmlable):
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="rp", attributes=attributes, children=children)

@value
struct ImageMap(Htmlable):
    var children: List[Element]
    var name: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: ImageMapArgs, name: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.name = name
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.name:
            attributes["name"] = self.name.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="map", attributes=attributes, children=children)

@value
struct ImageMapArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, Base, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Body, Bold, Button, Canvas, Caption, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionDetails, DescriptionList, DescriptionTerm, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, FigureCaption, Footer, Form, Head, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Html, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, Legend, LineBreak, LineBreakOpportunity, Link, ListItem, Main, MarkText, MediaSource, Menu, Meta, Meter, Navigation, NoScript, Object, Option, OptionGroup, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, RubyFallbackParenthesis, RubyText, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, Style, SubScript, Summary, SuperScript, Table, TableBody, TableCell, TableColumn, TableColumnGroup, TableFoot, TableHead, TableHeader, TableRow, Template, Text, TextArea, TextTrack, ThematicBreak, Time, Title, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[Base]():
            return self.get[Base]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Body]():
            return self.get[Body]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Caption]():
            return self.get[Caption]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[FigureCaption]():
            return self.get[FigureCaption]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Head]():
            return self.get[Head]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Html]():
            return self.get[Html]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[Legend]():
            return self.get[Legend]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[ListItem]():
            return self.get[ListItem]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[MediaSource]():
            return self.get[MediaSource]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[RubyFallbackParenthesis]():
            return self.get[RubyFallbackParenthesis]().to_element()
        if self.isa[RubyText]():
            return self.get[RubyText]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[Style]():
            return self.get[Style]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[Summary]():
            return self.get[Summary]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[TableBody]():
            return self.get[TableBody]().to_element()
        if self.isa[TableCell]():
            return self.get[TableCell]().to_element()
        if self.isa[TableColumn]():
            return self.get[TableColumn]().to_element()
        if self.isa[TableColumnGroup]():
            return self.get[TableColumnGroup]().to_element()
        if self.isa[TableFoot]():
            return self.get[TableFoot]().to_element()
        if self.isa[TableHead]():
            return self.get[TableHead]().to_element()
        if self.isa[TableHeader]():
            return self.get[TableHeader]().to_element()
        if self.isa[TableRow]():
            return self.get[TableRow]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[TextTrack]():
            return self.get[TextTrack]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Title]():
            return self.get[Title]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: Base):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Body):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Caption):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: FigureCaption):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Head):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Html):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: Legend):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: ListItem):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: MediaSource):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyFallbackParenthesis):
        self.data = rhs
    fn __init__(inout self, rhs: RubyText):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: Style):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: Summary):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: TableBody):
        self.data = rhs
    fn __init__(inout self, rhs: TableCell):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumn):
        self.data = rhs
    fn __init__(inout self, rhs: TableColumnGroup):
        self.data = rhs
    fn __init__(inout self, rhs: TableFoot):
        self.data = rhs
    fn __init__(inout self, rhs: TableHead):
        self.data = rhs
    fn __init__(inout self, rhs: TableHeader):
        self.data = rhs
    fn __init__(inout self, rhs: TableRow):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: TextTrack):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Title):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Cite(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: CiteArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="cite", attributes=attributes, children=children)

@value
struct CiteArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct MarkText(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: MarkTextArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="mark", attributes=attributes, children=children)

@value
struct MarkTextArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct DescriptionList(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: DescriptionListArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="dl", attributes=attributes, children=children)

@value
struct DescriptionListArgs(Htmlable):
    alias _storage = Variant[DescriptionDetails, DescriptionTerm, Division, Script, Template]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[DescriptionDetails]():
            return self.get[DescriptionDetails]().to_element()
        if self.isa[DescriptionTerm]():
            return self.get[DescriptionTerm]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: DescriptionDetails):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionTerm):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs

@value
struct TableCell(Htmlable):
    var children: List[Element]
    var colspan: OptionalString
    var rowspan: OptionalString
    var headers: OptionalString
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: TableCellArgs, colspan: OptionalString = None, rowspan: OptionalString = None, headers: OptionalString = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.colspan = colspan
        self.rowspan = rowspan
        self.headers = headers
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.colspan:
            attributes["colspan"] = self.colspan.value()
        if self.rowspan:
            attributes["rowspan"] = self.rowspan.value()
        if self.headers:
            attributes["headers"] = self.headers.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="td", attributes=attributes, children=children)

@value
struct TableCellArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Address, Anchor, Article, Aside, Audio, BidirectionalIsolate, BidirectionalTextOverride, BlockQuote, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, DescriptionList, Details, Dialog, Division, Embed, Emphasis, Fieldset, Figure, Footer, Form, Header, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, Main, MarkText, Menu, Meta, Meter, Navigation, NoScript, Object, OrderedList, Output, Paragraph, Picture, PreformattedText, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Search, Section, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Table, Template, Text, TextArea, ThematicBreak, Time, Underline, UnorderedList, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Address]():
            return self.get[Address]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Article]():
            return self.get[Article]().to_element()
        if self.isa[Aside]():
            return self.get[Aside]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[BlockQuote]():
            return self.get[BlockQuote]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[DescriptionList]():
            return self.get[DescriptionList]().to_element()
        if self.isa[Details]():
            return self.get[Details]().to_element()
        if self.isa[Dialog]():
            return self.get[Dialog]().to_element()
        if self.isa[Division]():
            return self.get[Division]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Fieldset]():
            return self.get[Fieldset]().to_element()
        if self.isa[Figure]():
            return self.get[Figure]().to_element()
        if self.isa[Footer]():
            return self.get[Footer]().to_element()
        if self.isa[Form]():
            return self.get[Form]().to_element()
        if self.isa[Header]():
            return self.get[Header]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[Main]():
            return self.get[Main]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Menu]():
            return self.get[Menu]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[Navigation]():
            return self.get[Navigation]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[OrderedList]():
            return self.get[OrderedList]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Paragraph]():
            return self.get[Paragraph]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[PreformattedText]():
            return self.get[PreformattedText]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Search]():
            return self.get[Search]().to_element()
        if self.isa[Section]():
            return self.get[Section]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Table]():
            return self.get[Table]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[UnorderedList]():
            return self.get[UnorderedList]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Address):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Article):
        self.data = rhs
    fn __init__(inout self, rhs: Aside):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: BlockQuote):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: DescriptionList):
        self.data = rhs
    fn __init__(inout self, rhs: Details):
        self.data = rhs
    fn __init__(inout self, rhs: Dialog):
        self.data = rhs
    fn __init__(inout self, rhs: Division):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Fieldset):
        self.data = rhs
    fn __init__(inout self, rhs: Figure):
        self.data = rhs
    fn __init__(inout self, rhs: Footer):
        self.data = rhs
    fn __init__(inout self, rhs: Form):
        self.data = rhs
    fn __init__(inout self, rhs: Header):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: Main):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Menu):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: Navigation):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: OrderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Paragraph):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: PreformattedText):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Search):
        self.data = rhs
    fn __init__(inout self, rhs: Section):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Table):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: UnorderedList):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Meta(Htmlable):
    var name: OptionalString
    var http_equiv: OptionalString
    var content: OptionalString
    var charset: OptionalString
    var media: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = List[Element]()
        if self.name:
            attributes["name"] = self.name.value()
        if self.http_equiv:
            attributes["http_equiv"] = self.http_equiv.value()
        if self.content:
            attributes["content"] = self.content.value()
        if self.charset:
            attributes["charset"] = self.charset.value()
        if self.media:
            attributes["media"] = self.media.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="meta", attributes=attributes, children=children)

@value
struct Bold(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_checked: OptionalString
    var aria_col_count: Optional[Int]
    var aria_col_index: Optional[Int]
    var aria_col_index_text: OptionalString
    var aria_col_span: Optional[Int]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_level: Optional[Int]
    var aria_live: OptionalString
    var aria_modal: Optional[Bool]
    var aria_multi_line: Optional[Bool]
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_placeholder: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_pressed: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var aria_row_count: Optional[Int]
    var aria_row_index: Optional[Int]
    var aria_row_index_text: OptionalString
    var aria_row_span: Optional[Int]
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var aria_sort: OptionalString
    var aria_value_max: Optional[Float64]
    var aria_value_min: Optional[Float64]
    var aria_value_now: Optional[Float64]
    var aria_value_text: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: BoldArgs, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_checked: OptionalString = None, aria_col_count: Optional[Int] = None, aria_col_index: Optional[Int] = None, aria_col_index_text: OptionalString = None, aria_col_span: Optional[Int] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_level: Optional[Int] = None, aria_live: OptionalString = None, aria_modal: Optional[Bool] = None, aria_multi_line: Optional[Bool] = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_placeholder: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_pressed: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, aria_row_count: Optional[Int] = None, aria_row_index: Optional[Int] = None, aria_row_index_text: OptionalString = None, aria_row_span: Optional[Int] = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, aria_sort: OptionalString = None, aria_value_max: Optional[Float64] = None, aria_value_min: Optional[Float64] = None, aria_value_now: Optional[Float64] = None, aria_value_text: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_checked = aria_checked
        self.aria_col_count = aria_col_count
        self.aria_col_index = aria_col_index
        self.aria_col_index_text = aria_col_index_text
        self.aria_col_span = aria_col_span
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_level = aria_level
        self.aria_live = aria_live
        self.aria_modal = aria_modal
        self.aria_multi_line = aria_multi_line
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_placeholder = aria_placeholder
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_pressed = aria_pressed
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.aria_row_count = aria_row_count
        self.aria_row_index = aria_row_index
        self.aria_row_index_text = aria_row_index_text
        self.aria_row_span = aria_row_span
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.aria_sort = aria_sort
        self.aria_value_max = aria_value_max
        self.aria_value_min = aria_value_min
        self.aria_value_now = aria_value_now
        self.aria_value_text = aria_value_text
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_checked:
            attributes["aria_checked"] = self.aria_checked.value()
        if self.aria_col_count:
            attributes["aria_col_count"] = self.aria_col_count.value()
        if self.aria_col_index:
            attributes["aria_col_index"] = self.aria_col_index.value()
        if self.aria_col_index_text:
            attributes["aria_col_index_text"] = self.aria_col_index_text.value()
        if self.aria_col_span:
            attributes["aria_col_span"] = self.aria_col_span.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_level:
            attributes["aria_level"] = self.aria_level.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_modal:
            attributes["aria_modal"] = self.aria_modal.value()
        if self.aria_multi_line:
            attributes["aria_multi_line"] = self.aria_multi_line.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_placeholder:
            attributes["aria_placeholder"] = self.aria_placeholder.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_pressed:
            attributes["aria_pressed"] = self.aria_pressed.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_row_count:
            attributes["aria_row_count"] = self.aria_row_count.value()
        if self.aria_row_index:
            attributes["aria_row_index"] = self.aria_row_index.value()
        if self.aria_row_index_text:
            attributes["aria_row_index_text"] = self.aria_row_index_text.value()
        if self.aria_row_span:
            attributes["aria_row_span"] = self.aria_row_span.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.aria_sort:
            attributes["aria_sort"] = self.aria_sort.value()
        if self.aria_value_max:
            attributes["aria_value_max"] = self.aria_value_max.value()
        if self.aria_value_min:
            attributes["aria_value_min"] = self.aria_value_min.value()
        if self.aria_value_now:
            attributes["aria_value_now"] = self.aria_value_now.value()
        if self.aria_value_text:
            attributes["aria_value_text"] = self.aria_value_text.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="b", attributes=attributes, children=children)

@value
struct BoldArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Heading4(Htmlable):
    var children: List[Element]
    var role: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_pos_in_set: Optional[Int]
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var aria_selected: Optional[Bool]
    var aria_set_size: Optional[Int]
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: Heading4Args, role: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_pos_in_set: Optional[Int] = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, aria_selected: Optional[Bool] = None, aria_set_size: Optional[Int] = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.role = role
        self.aria_atomic = aria_atomic
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_pos_in_set = aria_pos_in_set
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.aria_selected = aria_selected
        self.aria_set_size = aria_set_size
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_pos_in_set:
            attributes["aria_pos_in_set"] = self.aria_pos_in_set.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.aria_selected:
            attributes["aria_selected"] = self.aria_selected.value()
        if self.aria_set_size:
            attributes["aria_set_size"] = self.aria_set_size.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="h4", attributes=attributes, children=children)

@value
struct Heading4Args(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs

@value
struct Select(Htmlable):
    var children: List[Element]
    var autocomplete: OptionalString
    var disabled: Optional[Bool]
    var form: OptionalString
    var multiple: Optional[Bool]
    var name: OptionalString
    var required: Optional[Bool]
    var size: Optional[Int]
    var role: OptionalString
    var aria_active_descendant_element: OptionalString
    var aria_atomic: Optional[Bool]
    var aria_auto_complete: OptionalString
    var aria_braille_label: OptionalString
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_expanded: Optional[Bool]
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_label: OptionalString
    var aria_labelled_by_elements: OptionalString
    var aria_live: OptionalString
    var aria_multi_selectable: Optional[Bool]
    var aria_orientation: OptionalString
    var aria_owns_elements: OptionalString
    var aria_read_only: Optional[Bool]
    var aria_relevant: OptionalString
    var aria_required: Optional[Bool]
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: SelectArgs, autocomplete: OptionalString = None, disabled: Optional[Bool] = None, form: OptionalString = None, multiple: Optional[Bool] = None, name: OptionalString = None, required: Optional[Bool] = None, size: Optional[Int] = None, role: OptionalString = None, aria_active_descendant_element: OptionalString = None, aria_atomic: Optional[Bool] = None, aria_auto_complete: OptionalString = None, aria_braille_label: OptionalString = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_expanded: Optional[Bool] = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_label: OptionalString = None, aria_labelled_by_elements: OptionalString = None, aria_live: OptionalString = None, aria_multi_selectable: Optional[Bool] = None, aria_orientation: OptionalString = None, aria_owns_elements: OptionalString = None, aria_read_only: Optional[Bool] = None, aria_relevant: OptionalString = None, aria_required: Optional[Bool] = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.autocomplete = autocomplete
        self.disabled = disabled
        self.form = form
        self.multiple = multiple
        self.name = name
        self.required = required
        self.size = size
        self.role = role
        self.aria_active_descendant_element = aria_active_descendant_element
        self.aria_atomic = aria_atomic
        self.aria_auto_complete = aria_auto_complete
        self.aria_braille_label = aria_braille_label
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_expanded = aria_expanded
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_label = aria_label
        self.aria_labelled_by_elements = aria_labelled_by_elements
        self.aria_live = aria_live
        self.aria_multi_selectable = aria_multi_selectable
        self.aria_orientation = aria_orientation
        self.aria_owns_elements = aria_owns_elements
        self.aria_read_only = aria_read_only
        self.aria_relevant = aria_relevant
        self.aria_required = aria_required
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.autocomplete:
            attributes["autocomplete"] = self.autocomplete.value()
        if self.disabled:
            attributes["disabled"] = self.disabled.value()
        if self.form:
            attributes["form"] = self.form.value()
        if self.multiple:
            attributes["multiple"] = self.multiple.value()
        if self.name:
            attributes["name"] = self.name.value()
        if self.required:
            attributes["required"] = self.required.value()
        if self.size:
            attributes["size"] = self.size.value()
        if self.role:
            attributes["role"] = self.role.value()
        if self.aria_active_descendant_element:
            attributes["aria_active_descendant_element"] = self.aria_active_descendant_element.value()
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_auto_complete:
            attributes["aria_auto_complete"] = self.aria_auto_complete.value()
        if self.aria_braille_label:
            attributes["aria_braille_label"] = self.aria_braille_label.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_expanded:
            attributes["aria_expanded"] = self.aria_expanded.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_label:
            attributes["aria_label"] = self.aria_label.value()
        if self.aria_labelled_by_elements:
            attributes["aria_labelled_by_elements"] = self.aria_labelled_by_elements.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_multi_selectable:
            attributes["aria_multi_selectable"] = self.aria_multi_selectable.value()
        if self.aria_orientation:
            attributes["aria_orientation"] = self.aria_orientation.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_read_only:
            attributes["aria_read_only"] = self.aria_read_only.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_required:
            attributes["aria_required"] = self.aria_required.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="select", attributes=attributes, children=children)

@value
struct SelectArgs(Htmlable):
    alias _storage = Variant[Option, OptionGroup, Script, Template, ThematicBreak]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Option]():
            return self.get[Option]().to_element()
        if self.isa[OptionGroup]():
            return self.get[OptionGroup]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[ThematicBreak]():
            return self.get[ThematicBreak]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Option):
        self.data = rhs
    fn __init__(inout self, rhs: OptionGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: ThematicBreak):
        self.data = rhs

@value
struct Legend(Htmlable):
    var children: List[Element]
    var aria_atomic: Optional[Bool]
    var aria_braille_role_description: OptionalString
    var aria_busy: Optional[Bool]
    var aria_controls_elements: OptionalString
    var aria_current: OptionalString
    var aria_described_by_elements: OptionalString
    var aria_description: OptionalString
    var aria_details_elements: OptionalString
    var aria_disabled: Optional[Bool]
    var aria_drop_effect: OptionalString
    var aria_error_message_elements: OptionalString
    var aria_flow_to_elements: OptionalString
    var aria_grabbed: Optional[Bool]
    var aria_has_popup: OptionalString
    var aria_hidden: Optional[Bool]
    var aria_invalid: OptionalString
    var aria_key_shortcuts: OptionalString
    var aria_live: OptionalString
    var aria_owns_elements: OptionalString
    var aria_relevant: OptionalString
    var aria_role_description: OptionalString
    var access_key: OptionalString
    var auto_capitalize: OptionalString
    var autofocus: Optional[Bool]
    var class_: OptionalString
    var content_editable: OptionalString
    var direction: OptionalString
    var draggable: Optional[Bool]
    var enter_key_hint: OptionalString
    var export_parts: OptionalString
    var hidden: OptionalString
    var id: OptionalString
    var inert: Optional[Bool]
    var input_mode: OptionalString
    var is_: OptionalString
    var item_id: OptionalString
    var item_prop: OptionalString
    var item_ref: OptionalString
    var item_scope: OptionalString
    var item_type: OptionalString
    var lang: OptionalString
    var nonce: OptionalString
    var part: OptionalString
    var slot: OptionalString
    var spellcheck: OptionalString
    var style: OptionalString
    var tab_index: Optional[Int]
    var title: OptionalString
    var translate: Optional[Bool]


    fn __init__[*Ts: Htmlable](inout self, *elements: LegendArgs, aria_atomic: Optional[Bool] = None, aria_braille_role_description: OptionalString = None, aria_busy: Optional[Bool] = None, aria_controls_elements: OptionalString = None, aria_current: OptionalString = None, aria_described_by_elements: OptionalString = None, aria_description: OptionalString = None, aria_details_elements: OptionalString = None, aria_disabled: Optional[Bool] = None, aria_drop_effect: OptionalString = None, aria_error_message_elements: OptionalString = None, aria_flow_to_elements: OptionalString = None, aria_grabbed: Optional[Bool] = None, aria_has_popup: OptionalString = None, aria_hidden: Optional[Bool] = None, aria_invalid: OptionalString = None, aria_key_shortcuts: OptionalString = None, aria_live: OptionalString = None, aria_owns_elements: OptionalString = None, aria_relevant: OptionalString = None, aria_role_description: OptionalString = None, access_key: OptionalString = None, auto_capitalize: OptionalString = None, autofocus: Optional[Bool] = None, class_: OptionalString = None, content_editable: OptionalString = None, direction: OptionalString = None, draggable: Optional[Bool] = None, enter_key_hint: OptionalString = None, export_parts: OptionalString = None, hidden: OptionalString = None, id: OptionalString = None, inert: Optional[Bool] = None, input_mode: OptionalString = None, is_: OptionalString = None, item_id: OptionalString = None, item_prop: OptionalString = None, item_ref: OptionalString = None, item_scope: OptionalString = None, item_type: OptionalString = None, lang: OptionalString = None, nonce: OptionalString = None, part: OptionalString = None, slot: OptionalString = None, spellcheck: OptionalString = None, style: OptionalString = None, tab_index: Optional[Int] = None, title: OptionalString = None, translate: Optional[Bool] = None):
        self.children = List[Element]()
        for elem in elements:
            self.children.append(elem[].to_element())
        self.aria_atomic = aria_atomic
        self.aria_braille_role_description = aria_braille_role_description
        self.aria_busy = aria_busy
        self.aria_controls_elements = aria_controls_elements
        self.aria_current = aria_current
        self.aria_described_by_elements = aria_described_by_elements
        self.aria_description = aria_description
        self.aria_details_elements = aria_details_elements
        self.aria_disabled = aria_disabled
        self.aria_drop_effect = aria_drop_effect
        self.aria_error_message_elements = aria_error_message_elements
        self.aria_flow_to_elements = aria_flow_to_elements
        self.aria_grabbed = aria_grabbed
        self.aria_has_popup = aria_has_popup
        self.aria_hidden = aria_hidden
        self.aria_invalid = aria_invalid
        self.aria_key_shortcuts = aria_key_shortcuts
        self.aria_live = aria_live
        self.aria_owns_elements = aria_owns_elements
        self.aria_relevant = aria_relevant
        self.aria_role_description = aria_role_description
        self.access_key = access_key
        self.auto_capitalize = auto_capitalize
        self.autofocus = autofocus
        self.class_ = class_
        self.content_editable = content_editable
        self.direction = direction
        self.draggable = draggable
        self.enter_key_hint = enter_key_hint
        self.export_parts = export_parts
        self.hidden = hidden
        self.id = id
        self.inert = inert
        self.input_mode = input_mode
        self.is_ = is_
        self.item_id = item_id
        self.item_prop = item_prop
        self.item_ref = item_ref
        self.item_scope = item_scope
        self.item_type = item_type
        self.lang = lang
        self.nonce = nonce
        self.part = part
        self.slot = slot
        self.spellcheck = spellcheck
        self.style = style
        self.tab_index = tab_index
        self.title = title
        self.translate = translate

    fn to_element(self) -> Element:
        var attributes = Dict[String, Attribute]()
        var children = self.children
        if self.aria_atomic:
            attributes["aria_atomic"] = self.aria_atomic.value()
        if self.aria_braille_role_description:
            attributes["aria_braille_role_description"] = self.aria_braille_role_description.value()
        if self.aria_busy:
            attributes["aria_busy"] = self.aria_busy.value()
        if self.aria_controls_elements:
            attributes["aria_controls_elements"] = self.aria_controls_elements.value()
        if self.aria_current:
            attributes["aria_current"] = self.aria_current.value()
        if self.aria_described_by_elements:
            attributes["aria_described_by_elements"] = self.aria_described_by_elements.value()
        if self.aria_description:
            attributes["aria_description"] = self.aria_description.value()
        if self.aria_details_elements:
            attributes["aria_details_elements"] = self.aria_details_elements.value()
        if self.aria_disabled:
            attributes["aria_disabled"] = self.aria_disabled.value()
        if self.aria_drop_effect:
            attributes["aria_drop_effect"] = self.aria_drop_effect.value()
        if self.aria_error_message_elements:
            attributes["aria_error_message_elements"] = self.aria_error_message_elements.value()
        if self.aria_flow_to_elements:
            attributes["aria_flow_to_elements"] = self.aria_flow_to_elements.value()
        if self.aria_grabbed:
            attributes["aria_grabbed"] = self.aria_grabbed.value()
        if self.aria_has_popup:
            attributes["aria_has_popup"] = self.aria_has_popup.value()
        if self.aria_hidden:
            attributes["aria_hidden"] = self.aria_hidden.value()
        if self.aria_invalid:
            attributes["aria_invalid"] = self.aria_invalid.value()
        if self.aria_key_shortcuts:
            attributes["aria_key_shortcuts"] = self.aria_key_shortcuts.value()
        if self.aria_live:
            attributes["aria_live"] = self.aria_live.value()
        if self.aria_owns_elements:
            attributes["aria_owns_elements"] = self.aria_owns_elements.value()
        if self.aria_relevant:
            attributes["aria_relevant"] = self.aria_relevant.value()
        if self.aria_role_description:
            attributes["aria_role_description"] = self.aria_role_description.value()
        if self.access_key:
            attributes["access_key"] = self.access_key.value()
        if self.auto_capitalize:
            attributes["auto_capitalize"] = self.auto_capitalize.value()
        if self.autofocus:
            attributes["autofocus"] = self.autofocus.value()
        if self.class_:
            attributes["class_"] = self.class_.value()
        if self.content_editable:
            attributes["content_editable"] = self.content_editable.value()
        if self.direction:
            attributes["direction"] = self.direction.value()
        if self.draggable:
            attributes["draggable"] = self.draggable.value()
        if self.enter_key_hint:
            attributes["enter_key_hint"] = self.enter_key_hint.value()
        if self.export_parts:
            attributes["export_parts"] = self.export_parts.value()
        if self.hidden:
            attributes["hidden"] = self.hidden.value()
        if self.id:
            attributes["id"] = self.id.value()
        if self.inert:
            attributes["inert"] = self.inert.value()
        if self.input_mode:
            attributes["input_mode"] = self.input_mode.value()
        if self.is_:
            attributes["is_"] = self.is_.value()
        if self.item_id:
            attributes["item_id"] = self.item_id.value()
        if self.item_prop:
            attributes["item_prop"] = self.item_prop.value()
        if self.item_ref:
            attributes["item_ref"] = self.item_ref.value()
        if self.item_scope:
            attributes["item_scope"] = self.item_scope.value()
        if self.item_type:
            attributes["item_type"] = self.item_type.value()
        if self.lang:
            attributes["lang"] = self.lang.value()
        if self.nonce:
            attributes["nonce"] = self.nonce.value()
        if self.part:
            attributes["part"] = self.part.value()
        if self.slot:
            attributes["slot"] = self.slot.value()
        if self.spellcheck:
            attributes["spellcheck"] = self.spellcheck.value()
        if self.style:
            attributes["style"] = self.style.value()
        if self.tab_index:
            attributes["tab_index"] = self.tab_index.value()
        if self.title:
            attributes["title"] = self.title.value()
        if self.translate:
            attributes["translate"] = self.translate.value()
        return Node(tag="legend", attributes=attributes, children=children)

@value
struct LegendArgs(Htmlable):
    alias _storage = Variant[Abbreviation, Anchor, Audio, BidirectionalIsolate, BidirectionalTextOverride, Bold, Button, Canvas, Cite, Code, Data, DataList, Definition, DeletedText, Embed, Emphasis, Heading1, Heading2, Heading3, Heading4, Heading5, Heading6, HeadingGroup, Iframe, Image, ImageMap, ImageMapArea, Input, InsertedText, Italic, KeyboardInput, Label, LineBreak, LineBreakOpportunity, Link, MarkText, Meta, Meter, NoScript, Object, Output, Picture, Progress, Quotation, RubyAnnotation, SampleOutput, Script, Select, SideComment, Slot, Span, StrikeThrough, Strong, SubScript, SuperScript, Template, Text, TextArea, Time, Underline, Variable, Video]
    var data: Self._storage
    fn isa[T: CollectionElement](self) -> Bool: return self.data.isa[T]()
    fn get[T: CollectionElement](self) -> T: return self.data.get[T]()[]
    fn to_element(self) -> Element:
        if self.isa[Abbreviation]():
            return self.get[Abbreviation]().to_element()
        if self.isa[Anchor]():
            return self.get[Anchor]().to_element()
        if self.isa[Audio]():
            return self.get[Audio]().to_element()
        if self.isa[BidirectionalIsolate]():
            return self.get[BidirectionalIsolate]().to_element()
        if self.isa[BidirectionalTextOverride]():
            return self.get[BidirectionalTextOverride]().to_element()
        if self.isa[Bold]():
            return self.get[Bold]().to_element()
        if self.isa[Button]():
            return self.get[Button]().to_element()
        if self.isa[Canvas]():
            return self.get[Canvas]().to_element()
        if self.isa[Cite]():
            return self.get[Cite]().to_element()
        if self.isa[Code]():
            return self.get[Code]().to_element()
        if self.isa[Data]():
            return self.get[Data]().to_element()
        if self.isa[DataList]():
            return self.get[DataList]().to_element()
        if self.isa[Definition]():
            return self.get[Definition]().to_element()
        if self.isa[DeletedText]():
            return self.get[DeletedText]().to_element()
        if self.isa[Embed]():
            return self.get[Embed]().to_element()
        if self.isa[Emphasis]():
            return self.get[Emphasis]().to_element()
        if self.isa[Heading1]():
            return self.get[Heading1]().to_element()
        if self.isa[Heading2]():
            return self.get[Heading2]().to_element()
        if self.isa[Heading3]():
            return self.get[Heading3]().to_element()
        if self.isa[Heading4]():
            return self.get[Heading4]().to_element()
        if self.isa[Heading5]():
            return self.get[Heading5]().to_element()
        if self.isa[Heading6]():
            return self.get[Heading6]().to_element()
        if self.isa[HeadingGroup]():
            return self.get[HeadingGroup]().to_element()
        if self.isa[Iframe]():
            return self.get[Iframe]().to_element()
        if self.isa[Image]():
            return self.get[Image]().to_element()
        if self.isa[ImageMap]():
            return self.get[ImageMap]().to_element()
        if self.isa[ImageMapArea]():
            return self.get[ImageMapArea]().to_element()
        if self.isa[Input]():
            return self.get[Input]().to_element()
        if self.isa[InsertedText]():
            return self.get[InsertedText]().to_element()
        if self.isa[Italic]():
            return self.get[Italic]().to_element()
        if self.isa[KeyboardInput]():
            return self.get[KeyboardInput]().to_element()
        if self.isa[Label]():
            return self.get[Label]().to_element()
        if self.isa[LineBreak]():
            return self.get[LineBreak]().to_element()
        if self.isa[LineBreakOpportunity]():
            return self.get[LineBreakOpportunity]().to_element()
        if self.isa[Link]():
            return self.get[Link]().to_element()
        if self.isa[MarkText]():
            return self.get[MarkText]().to_element()
        if self.isa[Meta]():
            return self.get[Meta]().to_element()
        if self.isa[Meter]():
            return self.get[Meter]().to_element()
        if self.isa[NoScript]():
            return self.get[NoScript]().to_element()
        if self.isa[Object]():
            return self.get[Object]().to_element()
        if self.isa[Output]():
            return self.get[Output]().to_element()
        if self.isa[Picture]():
            return self.get[Picture]().to_element()
        if self.isa[Progress]():
            return self.get[Progress]().to_element()
        if self.isa[Quotation]():
            return self.get[Quotation]().to_element()
        if self.isa[RubyAnnotation]():
            return self.get[RubyAnnotation]().to_element()
        if self.isa[SampleOutput]():
            return self.get[SampleOutput]().to_element()
        if self.isa[Script]():
            return self.get[Script]().to_element()
        if self.isa[Select]():
            return self.get[Select]().to_element()
        if self.isa[SideComment]():
            return self.get[SideComment]().to_element()
        if self.isa[Slot]():
            return self.get[Slot]().to_element()
        if self.isa[Span]():
            return self.get[Span]().to_element()
        if self.isa[StrikeThrough]():
            return self.get[StrikeThrough]().to_element()
        if self.isa[Strong]():
            return self.get[Strong]().to_element()
        if self.isa[SubScript]():
            return self.get[SubScript]().to_element()
        if self.isa[SuperScript]():
            return self.get[SuperScript]().to_element()
        if self.isa[Template]():
            return self.get[Template]().to_element()
        if self.isa[Text]():
            return self.get[Text]().to_element()
        if self.isa[TextArea]():
            return self.get[TextArea]().to_element()
        if self.isa[Time]():
            return self.get[Time]().to_element()
        if self.isa[Underline]():
            return self.get[Underline]().to_element()
        if self.isa[Variable]():
            return self.get[Variable]().to_element()
        if self.isa[Video]():
            return self.get[Video]().to_element()
        return Text("").to_element()
    fn __init__(inout self, rhs: Abbreviation):
        self.data = rhs
    fn __init__(inout self, rhs: Anchor):
        self.data = rhs
    fn __init__(inout self, rhs: Audio):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalIsolate):
        self.data = rhs
    fn __init__(inout self, rhs: BidirectionalTextOverride):
        self.data = rhs
    fn __init__(inout self, rhs: Bold):
        self.data = rhs
    fn __init__(inout self, rhs: Button):
        self.data = rhs
    fn __init__(inout self, rhs: Canvas):
        self.data = rhs
    fn __init__(inout self, rhs: Cite):
        self.data = rhs
    fn __init__(inout self, rhs: Code):
        self.data = rhs
    fn __init__(inout self, rhs: Data):
        self.data = rhs
    fn __init__(inout self, rhs: DataList):
        self.data = rhs
    fn __init__(inout self, rhs: Definition):
        self.data = rhs
    fn __init__(inout self, rhs: DeletedText):
        self.data = rhs
    fn __init__(inout self, rhs: Embed):
        self.data = rhs
    fn __init__(inout self, rhs: Emphasis):
        self.data = rhs
    fn __init__(inout self, rhs: Heading1):
        self.data = rhs
    fn __init__(inout self, rhs: Heading2):
        self.data = rhs
    fn __init__(inout self, rhs: Heading3):
        self.data = rhs
    fn __init__(inout self, rhs: Heading4):
        self.data = rhs
    fn __init__(inout self, rhs: Heading5):
        self.data = rhs
    fn __init__(inout self, rhs: Heading6):
        self.data = rhs
    fn __init__(inout self, rhs: HeadingGroup):
        self.data = rhs
    fn __init__(inout self, rhs: Iframe):
        self.data = rhs
    fn __init__(inout self, rhs: Image):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMap):
        self.data = rhs
    fn __init__(inout self, rhs: ImageMapArea):
        self.data = rhs
    fn __init__(inout self, rhs: Input):
        self.data = rhs
    fn __init__(inout self, rhs: InsertedText):
        self.data = rhs
    fn __init__(inout self, rhs: Italic):
        self.data = rhs
    fn __init__(inout self, rhs: KeyboardInput):
        self.data = rhs
    fn __init__(inout self, rhs: Label):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreak):
        self.data = rhs
    fn __init__(inout self, rhs: LineBreakOpportunity):
        self.data = rhs
    fn __init__(inout self, rhs: Link):
        self.data = rhs
    fn __init__(inout self, rhs: MarkText):
        self.data = rhs
    fn __init__(inout self, rhs: Meta):
        self.data = rhs
    fn __init__(inout self, rhs: Meter):
        self.data = rhs
    fn __init__(inout self, rhs: NoScript):
        self.data = rhs
    fn __init__(inout self, rhs: Object):
        self.data = rhs
    fn __init__(inout self, rhs: Output):
        self.data = rhs
    fn __init__(inout self, rhs: Picture):
        self.data = rhs
    fn __init__(inout self, rhs: Progress):
        self.data = rhs
    fn __init__(inout self, rhs: Quotation):
        self.data = rhs
    fn __init__(inout self, rhs: RubyAnnotation):
        self.data = rhs
    fn __init__(inout self, rhs: SampleOutput):
        self.data = rhs
    fn __init__(inout self, rhs: Script):
        self.data = rhs
    fn __init__(inout self, rhs: Select):
        self.data = rhs
    fn __init__(inout self, rhs: SideComment):
        self.data = rhs
    fn __init__(inout self, rhs: Slot):
        self.data = rhs
    fn __init__(inout self, rhs: Span):
        self.data = rhs
    fn __init__(inout self, rhs: StrikeThrough):
        self.data = rhs
    fn __init__(inout self, rhs: Strong):
        self.data = rhs
    fn __init__(inout self, rhs: SubScript):
        self.data = rhs
    fn __init__(inout self, rhs: SuperScript):
        self.data = rhs
    fn __init__(inout self, rhs: Template):
        self.data = rhs
    fn __init__(inout self, rhs: Text):
        self.data = rhs
    fn __init__(inout self, rhs: TextArea):
        self.data = rhs
    fn __init__(inout self, rhs: Time):
        self.data = rhs
    fn __init__(inout self, rhs: Underline):
        self.data = rhs
    fn __init__(inout self, rhs: Variable):
        self.data = rhs
    fn __init__(inout self, rhs: Video):
        self.data = rhs
